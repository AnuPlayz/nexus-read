generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Manga {
  id          String    @id @default(cuid()) @map("_id")
  title       String
  description String
  coverImage  String
  releaseDate DateTime
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  Chapter     Chapter[]
}

model Chapter {
  id            String   @id @default(cuid()) @map("_id")
  title         String
  chapterNumber Int
  releaseDate   DateTime
  pages         String[]
  manga         Manga    @relation(fields: [mangaId], references: [id])
  mangaId       String
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  username      String    @unique
  email         String    @unique
  password      String
  profilePicUrl String?
  registeredAt  DateTime  @default(now())
  lastLoginAt   DateTime  @default(now())
  Manga         Manga[]
  tags          String[]  @default([])
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
